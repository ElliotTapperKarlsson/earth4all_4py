{
    "a0020": "integ( a0020, births -pass20, dt, 0 )",
    "a2040": "integ( a2040, pass20 -pass40, dt, 0 )",
    "a20pa": "a2040 + a4060 + a60pl - op",
    "a4060": "integ( a4060, pass40 -pass60, dt, 0 )",
    "a60pl": "integ( a60pl, pass60 -deaths, dt, 0 )",
    "birthr": "births / pop",
    "births": "a2040 * fw * ( of / fp )",
    "cefr": "cmfr * efr",
    "deathr": "deaths / pop",
    "deaths": "deaths_delay_n( k , pass60, le60, dying_in_1980, order )",
    "dnc": "( ( dncm + ( dnc80 - dncm ) * exp( - dncg * ( egdpp - gdpp1980 ))) * (1 + dnca * (egdpp - gdpp1980 )) ) * ( 1 - efr ) * fm",
    "dr": "( a0020 + a60pl ) / ( a2040 + a4060 )",
    "efr": "ramp( time, ( gefr / ipp ), ( 2022 ), ( 2022 + ipp ))",
    "egdpp": "smoothi( egdpp, gdpp, tahi, gdpp1980, dt )",
    "epa": "ramp( time, ( ( gepa - epa_2022 ) / ipp ), ( 2022 ), ( 22022 + ipp ))",
    "fm": "if_then_else(ssp2fa2022f > 0,if_then_else(time>2022, 1 + ramp( time, ( (mfm - 1 ) /78 ), ( 2022 ), ( 2100 )), 1), 1)",
    "gdpp": "gdp / pop",
    "le": "( ( lemax - (lemax - le_1980) * exp( - leg * (egdpp - gdpp1980)) ) * ( 1 + lea * ( egdpp - gdpp1980 )) ) * wele * lem",
    "le60": "le - 60",
    "lem": "if_then_else(ssp2fa2022f > 0,if_then_else(time>2022, 1 + ramp( time, ( (mlem - 1 ) /78 ), ( 2022 ), ( 2100 )), 1), 1)",
    "of": "dnc * fadfs",
    "op": "a60pl * (le - pa ) / ( le - 60 )",
    "pa": "if_then_else(le < le_1980, pa_1980, pa_1980 + leepa * ( le + epa - le_1980 ))",
    "pass20": "pass20_delay_n( k , births, 20, pass_20_1980, order )",
    "pass40": "pass40_delay_n( k , pass20, 20, pass_40_1980, order )",
    "pass60": "pass60_delay_n( k , pass40, 20, pass_60_1980, order )",
    "pgr": "birthr - deathr",
    "pop": "a0020 + a2040 + a4060 + a60pl",
    "pw": "op / a20pa",
    "wele": "if_then_else(time>2022, max(0, 1 + owele * ( ow / ow2022 - 1 )), 1 )"
}